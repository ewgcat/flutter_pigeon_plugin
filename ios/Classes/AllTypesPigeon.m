// Autogenerated from Pigeon (v1.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "AllTypesPigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface FLTEverything ()
+ (FLTEverything *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTEverything
+ (FLTEverything *)fromMap:(NSDictionary *)dict {
  FLTEverything *result = [[FLTEverything alloc] init];
  result.aBool = dict[@"aBool"];
  if ((NSNull *)result.aBool == [NSNull null]) {
    result.aBool = nil;
  }
  result.anInt = dict[@"anInt"];
  if ((NSNull *)result.anInt == [NSNull null]) {
    result.anInt = nil;
  }
  result.aDouble = dict[@"aDouble"];
  if ((NSNull *)result.aDouble == [NSNull null]) {
    result.aDouble = nil;
  }
  result.aString = dict[@"aString"];
  if ((NSNull *)result.aString == [NSNull null]) {
    result.aString = nil;
  }
  result.aByteArray = dict[@"aByteArray"];
  if ((NSNull *)result.aByteArray == [NSNull null]) {
    result.aByteArray = nil;
  }
  result.a4ByteArray = dict[@"a4ByteArray"];
  if ((NSNull *)result.a4ByteArray == [NSNull null]) {
    result.a4ByteArray = nil;
  }
  result.a8ByteArray = dict[@"a8ByteArray"];
  if ((NSNull *)result.a8ByteArray == [NSNull null]) {
    result.a8ByteArray = nil;
  }
  result.aFloatArray = dict[@"aFloatArray"];
  if ((NSNull *)result.aFloatArray == [NSNull null]) {
    result.aFloatArray = nil;
  }
  result.aList = dict[@"aList"];
  if ((NSNull *)result.aList == [NSNull null]) {
    result.aList = nil;
  }
  result.aMap = dict[@"aMap"];
  if ((NSNull *)result.aMap == [NSNull null]) {
    result.aMap = nil;
  }
  result.nestedList = dict[@"nestedList"];
  if ((NSNull *)result.nestedList == [NSNull null]) {
    result.nestedList = nil;
  }
  result.mapWithAnnotations = dict[@"mapWithAnnotations"];
  if ((NSNull *)result.mapWithAnnotations == [NSNull null]) {
    result.mapWithAnnotations = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.aBool ? self.aBool : [NSNull null]), @"aBool", (self.anInt ? self.anInt : [NSNull null]), @"anInt", (self.aDouble ? self.aDouble : [NSNull null]), @"aDouble", (self.aString ? self.aString : [NSNull null]), @"aString", (self.aByteArray ? self.aByteArray : [NSNull null]), @"aByteArray", (self.a4ByteArray ? self.a4ByteArray : [NSNull null]), @"a4ByteArray", (self.a8ByteArray ? self.a8ByteArray : [NSNull null]), @"a8ByteArray", (self.aFloatArray ? self.aFloatArray : [NSNull null]), @"aFloatArray", (self.aList ? self.aList : [NSNull null]), @"aList", (self.aMap ? self.aMap : [NSNull null]), @"aMap", (self.nestedList ? self.nestedList : [NSNull null]), @"nestedList", (self.mapWithAnnotations ? self.mapWithAnnotations : [NSNull null]), @"mapWithAnnotations", nil];
}
@end

@interface FLTHostEverythingCodecReader : FlutterStandardReader
@end
@implementation FLTHostEverythingCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTEverything fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTHostEverythingCodecWriter : FlutterStandardWriter
@end
@implementation FLTHostEverythingCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTEverything class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTHostEverythingCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTHostEverythingCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTHostEverythingCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTHostEverythingCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTHostEverythingGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FLTHostEverythingCodecReaderWriter *readerWriter = [[FLTHostEverythingCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void FLTHostEverythingSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTHostEverything> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.HostEverything.giveMeEverything"
        binaryMessenger:binaryMessenger
        codec:FLTHostEverythingGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(giveMeEverythingWithError:)], @"FLTHostEverything api doesn't respond to @selector(giveMeEverythingWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTEverything *output = [api giveMeEverythingWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.HostEverything.echo"
        binaryMessenger:binaryMessenger
        codec:FLTHostEverythingGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoEverything:error:)], @"FLTHostEverything api doesn't respond to @selector(echoEverything:error:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTEverything *arg_everything = args[0];
        FlutterError *error;
        FLTEverything *output = [api echoEverything:arg_everything error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTFlutterEverythingCodecReader : FlutterStandardReader
@end
@implementation FLTFlutterEverythingCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTEverything fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTFlutterEverythingCodecWriter : FlutterStandardWriter
@end
@implementation FLTFlutterEverythingCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTEverything class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTFlutterEverythingCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTFlutterEverythingCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTFlutterEverythingCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTFlutterEverythingCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTFlutterEverythingGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FLTFlutterEverythingCodecReaderWriter *readerWriter = [[FLTFlutterEverythingCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


@interface FLTFlutterEverything ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTFlutterEverything
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)giveMeEverythingFlutterWithCompletion:(void(^)(FLTEverything *, NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterEverything.giveMeEverythingFlutter"
      binaryMessenger:self.binaryMessenger
      codec:FLTFlutterEverythingGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    FLTEverything *output = reply;
    completion(output, nil);
  }];
}
- (void)echoFlutterEverything:(FLTEverything *)arg_everything completion:(void(^)(FLTEverything *, NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterEverything.echoFlutter"
      binaryMessenger:self.binaryMessenger
      codec:FLTFlutterEverythingGetCodec()];
  [channel sendMessage:@[arg_everything] reply:^(id reply) {
    FLTEverything *output = reply;
    completion(output, nil);
  }];
}
@end
