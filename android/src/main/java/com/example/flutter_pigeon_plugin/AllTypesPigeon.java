// Autogenerated from Pigeon (v1.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.flutter_pigeon_plugin;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class AllTypesPigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Everything {
    private Boolean aBool;
    public Boolean getABool() { return aBool; }
    public void setABool(Boolean setterArg) { this.aBool = setterArg; }

    private Long anInt;
    public Long getAnInt() { return anInt; }
    public void setAnInt(Long setterArg) { this.anInt = setterArg; }

    private Double aDouble;
    public Double getADouble() { return aDouble; }
    public void setADouble(Double setterArg) { this.aDouble = setterArg; }

    private String aString;
    public String getAString() { return aString; }
    public void setAString(String setterArg) { this.aString = setterArg; }

    private byte[] aByteArray;
    public byte[] getAByteArray() { return aByteArray; }
    public void setAByteArray(byte[] setterArg) { this.aByteArray = setterArg; }

    private int[] a4ByteArray;
    public int[] getA4ByteArray() { return a4ByteArray; }
    public void setA4ByteArray(int[] setterArg) { this.a4ByteArray = setterArg; }

    private long[] a8ByteArray;
    public long[] getA8ByteArray() { return a8ByteArray; }
    public void setA8ByteArray(long[] setterArg) { this.a8ByteArray = setterArg; }

    private double[] aFloatArray;
    public double[] getAFloatArray() { return aFloatArray; }
    public void setAFloatArray(double[] setterArg) { this.aFloatArray = setterArg; }

    private List<Object> aList;
    public List<Object> getAList() { return aList; }
    public void setAList(List<Object> setterArg) { this.aList = setterArg; }

    private Map<Object, Object> aMap;
    public Map<Object, Object> getAMap() { return aMap; }
    public void setAMap(Map<Object, Object> setterArg) { this.aMap = setterArg; }

    private List<List<Boolean>> nestedList;
    public List<List<Boolean>> getNestedList() { return nestedList; }
    public void setNestedList(List<List<Boolean>> setterArg) { this.nestedList = setterArg; }

    private Map<String, String> mapWithAnnotations;
    public Map<String, String> getMapWithAnnotations() { return mapWithAnnotations; }
    public void setMapWithAnnotations(Map<String, String> setterArg) { this.mapWithAnnotations = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("aBool", aBool);
      toMapResult.put("anInt", anInt);
      toMapResult.put("aDouble", aDouble);
      toMapResult.put("aString", aString);
      toMapResult.put("aByteArray", aByteArray);
      toMapResult.put("a4ByteArray", a4ByteArray);
      toMapResult.put("a8ByteArray", a8ByteArray);
      toMapResult.put("aFloatArray", aFloatArray);
      toMapResult.put("aList", aList);
      toMapResult.put("aMap", aMap);
      toMapResult.put("nestedList", nestedList);
      toMapResult.put("mapWithAnnotations", mapWithAnnotations);
      return toMapResult;
    }
    static Everything fromMap(Map<String, Object> map) {
      Everything fromMapResult = new Everything();
      Object aBool = map.get("aBool");
      fromMapResult.aBool = (Boolean)aBool;
      Object anInt = map.get("anInt");
      fromMapResult.anInt = (anInt == null) ? null : ((anInt instanceof Integer) ? (Integer)anInt : (Long)anInt);
      Object aDouble = map.get("aDouble");
      fromMapResult.aDouble = (Double)aDouble;
      Object aString = map.get("aString");
      fromMapResult.aString = (String)aString;
      Object aByteArray = map.get("aByteArray");
      fromMapResult.aByteArray = (byte[])aByteArray;
      Object a4ByteArray = map.get("a4ByteArray");
      fromMapResult.a4ByteArray = (int[])a4ByteArray;
      Object a8ByteArray = map.get("a8ByteArray");
      fromMapResult.a8ByteArray = (long[])a8ByteArray;
      Object aFloatArray = map.get("aFloatArray");
      fromMapResult.aFloatArray = (double[])aFloatArray;
      Object aList = map.get("aList");
      fromMapResult.aList = (List<Object>)aList;
      Object aMap = map.get("aMap");
      fromMapResult.aMap = (Map<Object, Object>)aMap;
      Object nestedList = map.get("nestedList");
      fromMapResult.nestedList = (List<List<Boolean>>)nestedList;
      Object mapWithAnnotations = map.get("mapWithAnnotations");
      fromMapResult.mapWithAnnotations = (Map<String, String>)mapWithAnnotations;
      return fromMapResult;
    }
  }
  private static class HostEverythingCodec extends StandardMessageCodec {
    public static final HostEverythingCodec INSTANCE = new HostEverythingCodec();
    private HostEverythingCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Everything.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Everything) {
        stream.write(128);
        writeValue(stream, ((Everything) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface HostEverything {
    Everything giveMeEverything();
    Everything echo(Everything everything);

    /** The codec used by HostEverything. */
    static MessageCodec<Object> getCodec() {
      return HostEverythingCodec.INSTANCE;
    }

    /** Sets up an instance of `HostEverything` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HostEverything api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostEverything.giveMeEverything", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Everything output = api.giveMeEverything();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostEverything.echo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Everything everythingArg = (Everything)args.get(0);
              if (everythingArg == null) {
                throw new NullPointerException("everythingArg unexpectedly null.");
              }
              Everything output = api.echo(everythingArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class FlutterEverythingCodec extends StandardMessageCodec {
    public static final FlutterEverythingCodec INSTANCE = new FlutterEverythingCodec();
    private FlutterEverythingCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Everything.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Everything) {
        stream.write(128);
        writeValue(stream, ((Everything) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterEverything {
    private final BinaryMessenger binaryMessenger;
    public FlutterEverything(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return FlutterEverythingCodec.INSTANCE;
    }

    public void giveMeEverythingFlutter(Reply<Everything> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterEverything.giveMeEverythingFlutter", getCodec());
      channel.send(null, channelReply -> {
        @SuppressWarnings("ConstantConditions")
        Everything output = (Everything)channelReply;
        callback.reply(output);
      });
    }
    public void echoFlutter(Everything everythingArg, Reply<Everything> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterEverything.echoFlutter", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(everythingArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        Everything output = (Everything)channelReply;
        callback.reply(output);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
